{
  "manifest": {
    "name": "@feathersjs/transport-commons",
    "description": "Shared functionality for websocket providers",
    "version": "4.0.0",
    "homepage": "https://github.com/feathersjs/transport-commons",
    "main": "lib/",
    "keywords": [
      "feathers",
      "feathers-plugin"
    ],
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "git://github.com/feathersjs/transport-commons.git"
    },
    "author": {
      "name": "Feathers contributors",
      "email": "hello@feathersjs.com",
      "url": "https://feathersjs.com"
    },
    "contributors": [],
    "bugs": {
      "url": "https://github.com/feathersjs/transport-commons/issues"
    },
    "engines": {
      "node": ">= 6"
    },
    "scripts": {
      "publish": "git push origin --tags && npm run changelog && git push origin",
      "changelog": "github_changelog_generator && git add CHANGELOG.md && git commit -am \"Updating changelog\"",
      "release:pre": "npm version prerelease && npm publish --tag pre --access public",
      "release:patch": "npm version patch && npm publish --access public",
      "release:minor": "npm version minor && npm publish --access public",
      "release:major": "npm version major && npm publish --access public",
      "lint": "semistandard --fix",
      "mocha": "mocha --opts mocha.opts",
      "coverage": "istanbul cover node_modules/mocha/bin/_mocha -- --opts mocha.opts",
      "test": "npm run lint && npm run coverage"
    },
    "semistandard": {
      "env": [
        "mocha"
      ]
    },
    "dependencies": {
      "@feathersjs/commons": "^1.4.0",
      "@feathersjs/errors": "^3.0.0",
      "debug": "^3.1.0",
      "lodash": "^4.17.4",
      "radix-router": "^3.0.1"
    },
    "devDependencies": {
      "@feathersjs/feathers": "^3.0.0",
      "istanbul": "^1.1.0-alpha.1",
      "mocha": "^5.0.0",
      "semistandard": "^12.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/node/.cache/yarn/v1/npm-@feathersjs/transport-commons-4.0.0-794630394f538a626a69fded658abeebc7c50fd9/package.json",
    "readmeFilename": "README.md",
    "readme": "# @feathersjs/transport-commons\n\n[![Greenkeeper badge](https://badges.greenkeeper.io/feathersjs/transport-commons.svg)](https://greenkeeper.io/)\n\n[![Build Status](https://travis-ci.org/feathersjs/transport-commons.png?branch=master)](https://travis-ci.org/feathersjs/transport-commons)\n[![Test Coverage](https://codeclimate.com/github/feathersjs/transport-commons/badges/coverage.svg)](https://codeclimate.com/github/feathersjs/transport-commons/coverage)\n[![Dependency Status](https://img.shields.io/david/feathersjs/transport-commons.svg?style=flat-square)](https://david-dm.org/feathersjs/transport-commons)\n[![Download Status](https://img.shields.io/npm/dm/@feathersjs/transport-commons.svg?style=flat-square)](https://www.npmjs.com/package/@feathersjs/transport-commons)\n\n> Shared functionality for Feathers API transports like [@feathers/socketio](https://github.com/feathersjs/socketio) and [@feathersjs/primus](https://github.com/feathersjs/primus). Only intended to be used internally.\n\n## About\n\n`@feathersjs/transport-commons` contains internal shared functionality for Feathers real-time providers (currently Socket.io and Primus).\n\n`lib/client.js` is a base socket service client\n`lib/index.js` returns a configurable function and requires the following options:\n\n- `done` - A Promise that resolves once the real-time protocol server has been set up\n- `emit` - The name of the method to emit data to a socket (`'emit'` for Socket.io and `'send'` for Primus)\n- `socketKey` - A string or ES6 Symbol which stores the actual socket connection\n- `getParams` - A function that returns the Feathers connection options for a socket\n\n## Channels\n\nChannels provide channel functionality for bi-directional Feathers service providers. It is e.g. used by the Socket.io and Primus provider to quickly determine what messages to send to connected clients.\n\n```\nconst channels = require('@feathersjs/transport-commons/lib/channels');\n```\n\n## Documentation\n\n### `app.channel(... names)`\n\nReturns a named or combined channel object.\n\n```js\nconst channel = app.channel('test'); // return a `test` channel\n\nchannel.join(connection); // join a channel\nchannel.leave(connection); // leave a channel\n\nchannel.filter(connection => {}) // return a new channel with filtered connections\nchannel.length // return the number of connections\nchannel.connections // all connections in this channel\n\nconst combined = app.channel('test', 'other'); // return a combined channel\n\ncombined.join(connection); // join the `test` and `other` channel\ncombined.leave(connection); // leave the `test` and `other` channel\n\nchannel.filter(connection => {}) // return a new channel with filtered connections (connections will only be iterated once)\ncombined.length // return the number of connections\ncombined.connections // all connections in the combined channel (if a connection is in multiple channels it will only show once)\n```\n\n### `app.service('servicename').publish(event, callback)`, `app.service('servicename').publish(callback)`\n\nRegister a publishing callback for a service and event (or all events) that returns a (named or combined) channel.\n\n```js\napp.use('/test', {\n  create(data) {\n    return Promise.resolve(data);\n  }\n});\n\n// `created` event for the `test` service\napp.service('test').publish('created', (data, hook) =>\n  app.channel('*')\n);\n\n// `created` event for the `test` service, sending different data to two different channels\napp.service('test').publish('created', (data, hook) => {\n  return [\n    app.channel('admins'),\n    app.channel('users').send(_.omit(data, 'groups', 'email'))\n  ];\n});\n\n// All events for all services\napp.publish((data, hook) =>\n  app.channel('*')\n);\n\n// All `created` events for all services\napp.publish('created', (data, hook) =>\n  app.channel('*')\n);\n\n// All events for `test` service\napp.service('test').publish((data, hook) =>\n  app.channel('*')\n);\n```\n\n### `app.on('publish', function(event, channel, hook) {})`\n\nAn event that will be sent every time a service event that has connections to publish to happens. `channel` is a combined channel with all connections to publish the event to.\n\n> _Note:_ If there are no channels or connections the `publish` event will not be sent.\n\n```js\napp.on('publish', (event, channel, hook) => {\n  channel.connections.forEach(connection => {\n    // Do something with `connection`\n  });\n});\n```\n\n## License\n\nCopyright (c) 2018\n\nLicensed under the [MIT license](LICENSE).\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2017 Feathers\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/@feathersjs/transport-commons/-/transport-commons-4.0.0.tgz#794630394f538a626a69fded658abeebc7c50fd9",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/@feathersjs/transport-commons/-/transport-commons-4.0.0.tgz",
    "hash": "794630394f538a626a69fded658abeebc7c50fd9",
    "registry": "npm"
  },
  "registry": "npm",
  "hash": "794630394f538a626a69fded658abeebc7c50fd9"
}